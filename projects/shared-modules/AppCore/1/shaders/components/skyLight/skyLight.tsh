// Convert a UV [-1:1] + faceID (0 - 5) to a vector
vec3 texelCoordToVec(vec2 uv, int faceID)
{
    mat3 faceUvVectors[6];

    // +x
    faceUvVectors[0][0] = vec3(0.0, 0.0, -1.0); // u -> -z
    faceUvVectors[0][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[0][2] = vec3(1.0, 0.0, 0.0);  // +x face

    // -x
    faceUvVectors[1][0] = vec3(0.0, 0.0, 1.0);  // u -> +z
    faceUvVectors[1][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[1][2] = vec3(-1.0, 0.0, 0.0); // -x face

    // +y
    faceUvVectors[2][0] = vec3(1.0, 0.0, 0.0);  // u -> +x
    faceUvVectors[2][1] = vec3(0.0, 0.0, 1.0);  // v -> +z
    faceUvVectors[2][2] = vec3(0.0, 1.0, 0.0);  // +y face

    // -y
    faceUvVectors[3][0] = vec3(1.0, 0.0, 0.0);  // u -> +x
    faceUvVectors[3][1] = vec3(0.0, 0.0, -1.0); // v -> -z
    faceUvVectors[3][2] = vec3(0.0, -1.0, 0.0); // -y face

    // +z
    faceUvVectors[4][0] = vec3(1.0, 0.0, 0.0);  // u -> +x
    faceUvVectors[4][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[4][2] = vec3(0.0, 0.0, 1.0);  // +z face

    // -z
    faceUvVectors[5][0] = vec3(-1.0, 0.0, 0.0); // u -> -x
    faceUvVectors[5][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[5][2] = vec3(0.0, 0.0, -1.0); // -z face

    // out = u * s_faceUv[0] + v * s_faceUv[1] + s_faceUv[2].
    vec3 result = (faceUvVectors[faceID][0] * uv.x) + (faceUvVectors[faceID][1] * uv.y) + faceUvVectors[faceID][2];
    return normalize(result);
}

vec3 ImportanceSampleGGX(vec2 Xi, float Roughness, vec3 N)
{
	float a = Roughness * Roughness; // DISNEY'S ROUGHNESS [see Burley'12 siggraph]

	// Compute distribution direction
	float Phi = 2.0 * M_PI * Xi.x;
	float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));		
	float SinTheta = sqrt(1.0 - CosTheta * CosTheta);

	// Convert to spherical direction
	vec3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	vec3 UpVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 TangentX = normalize(cross(UpVector, N));
	vec3 TangentY = cross(N, TangentX);

	// Tangent to world space
	return TangentX * H.x + TangentY * H.y + N * H.z;
}

// http://graphicrants.blogspot.com.au/2013/08/specular-brdf-reference.html
float GGX(float NdotV, float a)
{
	float k = a / 2.0;
	return NdotV / (NdotV * (1.0 - k) + k);
}

// http://graphicrants.blogspot.com.au/2013/08/specular-brdf-reference.html
float G_Smith(float a, float nDotV, float nDotL)
{
	return GGX(nDotL, a * a) * GGX(nDotV, a * a);
}

// Based on shaders by Dario Manesku
// Source: https://github.com/dariomanesku/cmftStudio/

// Lighting Equations - Fresnel
vec3 fresnel(vec3 _reflectivity, float _dot, float _strength)
{
	return _reflectivity + (1.0 - _reflectivity) * pow(1.0 - _dot, 5.0) * _strength;
}

// Lighting Equations - Image Based Lighting
vec3 iblLighting(sampler2D brdfTexture, 
                 samplerCube radianceCube, 
                 samplerCube irradianceCube,
                 vec3 view, 
                 vec3 normal,
                 vec3 albedo,
                 float metallic, 
                 float roughness)
{
    vec3  v     = view;
    vec3  n     = normalize(normal);
    float ndotv = clamp(dot(n, v), 0.0, 1.0);

    // Reflectivity
    vec3 reflectivity   = vec3_splat(metallic);
    reflectivity        = clamp(reflectivity, 0.0, 0.999);

    // Surface Values
    vec3  surfaceReflect = mix(vec3_splat(0.04), albedo, reflectivity);
    vec3  surfaceColor   = albedo * (vec3_splat(1.0) - reflectivity);
    float surfaceGloss   = 1.0 - roughness;
    vec3  surfaceFresnel = fresnel(surfaceReflect, ndotv, surfaceGloss);

    vec3  r     = 2.0 * ndotv * n - v; // reflect(v, n);
    vec3  cubeR = normalize(r);
    vec3  cubeN = n;
    float lod   = roughness * 6.0;

    // BRDF
    vec2 brdf = texture2D(brdfTexture, vec2(roughness, ndotv)).xy;

    // Radiance (Specular)
    cubeR.yz        = vec2(cubeR.z, cubeR.y * -1.0); // Adjust to Y-Up
    vec3 radiance   = textureCubeLod(radianceCube, cubeR, lod).xyz;
    vec3 ambspec    = surfaceFresnel * radiance * (brdf.x + brdf.y);

    // Irradiance (Diffuse)
    cubeN.yz        = vec2(cubeN.z, cubeN.y * -1.0); // Adjust to Y-Up
    vec3 irradiance = textureCube(irradianceCube, cubeN).xyz;
    vec3 ambdiff    = surfaceColor * irradiance;
    
    return ambdiff + ambspec;
}
