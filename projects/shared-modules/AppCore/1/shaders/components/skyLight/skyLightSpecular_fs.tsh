$input v_texcoord0

#include <torque6.tsh>
#include <lighting.tsh>

uniform mat4 u_sceneInvViewProjMat;
uniform vec4 u_camPos;

SAMPLER2D(Texture0, 0); // Normals
SAMPLER2D(Texture1, 1); // Material Info
SAMPLER2D(Texture2, 2); // Depth

SAMPLER2D(BRDFTexture, 3);          // BRDF Texture
SAMPLERCUBE(RadianceCubemap, 4);    // Radiance

void main()
{
    // Material Parameters
    vec4 matInfo = texture2D(Texture1, v_texcoord0);

    // Surface Info
    Surface surface;
    surface.worldSpacePosition  = getWorldSpacePosition(Texture2, v_texcoord0, u_sceneInvViewProjMat);
    surface.normal              = decodeNormalUint(texture2D(Texture0, v_texcoord0).xyz);
    surface.metallic            = matInfo.r;
    surface.roughness           = matInfo.g;

    // View Direction
    vec3 viewDir = normalize(u_camPos.xyz - surface.worldSpacePosition);

    // Image Based Lighting
    vec3 specular = iblSpecular(surface, viewDir, BRDFTexture, RadianceCubemap);

    // Output
    gl_FragColor = vec4(specular, 1.0);
}
