$input v_color0, v_texcoord0, v_sspos

#include <torque6.tsh>
#include <lighting.tsh>

uniform vec4 dirLightDirection;
uniform vec4 dirLightColor;
uniform mat4 u_sceneInvViewProjMat;
uniform vec4 u_camPos;

SAMPLER2D(Texture0, 0); // Normals
SAMPLER2D(Texture1, 1); // Material Info
SAMPLER2D(Texture2, 2); // Depth

// Cascaded ShadowMap
#include <shadows.tsh>
SAMPLER2DSHADOW(Texture3, 3); // ShadowMap
uniform mat4 u_shadowMtx[4];
uniform vec4 u_shadowParams;

void main()
{
    // Material Info
    vec4 matInfo = texture2D(Texture1, v_texcoord0);

    // Surface Info
    Surface surface;
    surface.worldSpacePosition  = getWorldSpacePosition(Texture2, v_texcoord0, u_sceneInvViewProjMat);
    surface.normal              = decodeNormalUint(texture2D(Texture0, v_texcoord0).xyz);
    surface.metallic            = matInfo.r;
    surface.roughness           = matInfo.g;

    // View Direction
    vec3 viewDir = normalize(u_camPos.xyz - surface.worldSpacePosition);

    // Determine cascade
    ShadowMapCascade cascade = getShadowMapCascade(u_shadowMtx, u_shadowParams, surface.worldSpacePosition, surface.normal);

    // Display a different color for each cascade.
    vec3 colorCoverage = vec3(0.0, 0.0, 0.0);
    if (cascade.index == 0)
    {
        float coverage = texcoordInRange(cascade.coord.xy) * 0.4;
        colorCoverage = vec3(-coverage, coverage, -coverage);
    }
    else if (cascade.index == 1)
    {
        float coverage = texcoordInRange(cascade.coord.xy) * 0.4;
        colorCoverage = vec3(coverage, coverage, -coverage);
    }
    else if (cascade.index == 2)
    {
        float coverage = texcoordInRange(cascade.coord.xy) * 0.4;
        colorCoverage = vec3(-coverage, -coverage, coverage);
    }
    else // if (cascade.index == 3)
    {
        float coverage = texcoordInRange(cascade.coord.xy) * 0.4;
        colorCoverage = vec3(coverage, -coverage, -coverage);
    }

    // Output
    gl_FragColor = vec4(colorCoverage, 1.0);
}
