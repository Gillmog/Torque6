$input v_color0, v_texcoord0, v_sspos

#include <torque6.tsh>
#include <lighting.sh>

uniform vec4 dirLightDirection;
uniform vec4 dirLightColor;
uniform mat4 u_sceneInvViewProjMat;
uniform vec4 u_camPos;

SAMPLER2D(Texture0, 0); // Normals
SAMPLER2D(Texture1, 1); // Material Info
SAMPLER2D(Texture2, 2); // Depth

// Cascaded ShadowMap
#include <shadows.sh>
uniform mat4 u_cascadeMtx0;
uniform mat4 u_cascadeMtx1;
uniform mat4 u_cascadeMtx2;
uniform mat4 u_cascadeMtx3;
SAMPLER2DSHADOW(Texture3, 3); // ShadowMap Cascade 0
SAMPLER2DSHADOW(Texture4, 4); // ShadowMap Cascade 1
SAMPLER2DSHADOW(Texture5, 5); // ShadowMap Cascade 2
SAMPLER2DSHADOW(Texture6, 6); // ShadowMap Cascade 3

uniform vec4 u_shadowParams;
#define bias         u_shadowParams.x
#define normalOffset u_shadowParams.y

void main()
{
    // World-Space Position
    float deviceDepth   = texture2D(Texture2, v_texcoord0).x;
    float depth         = toClipSpaceDepth(deviceDepth);
    vec3  clip          = vec3(toClipSpace(v_texcoord0), depth);
    vec3  wpos          = clipToWorld(u_sceneInvViewProjMat, clip);

    // Normals
    vec3 normal = decodeNormalUint(texture2D(Texture0, v_texcoord0).xyz);

    // View Direction
    vec3 viewDir = normalize(u_camPos.xyz - wpos);

    // Material Info
    vec4 matInfo = texture2D(Texture1, v_texcoord0);

    // Shadows
    vec2 offsetScales = getShadowOffsetScales(normal.xyz, -dirLightDirection.xyz);
    vec4 csmcoord1 = mul(u_cascadeMtx0, vec4(wpos + (normal.xyz * normalOffset), 1.0));
         csmcoord1 = csmcoord1 / csmcoord1.w;
    vec4 csmcoord2 = mul(u_cascadeMtx1, vec4(wpos + (normal.xyz * normalOffset), 1.0));
         csmcoord2 = csmcoord2 / csmcoord2.w;
    vec4 csmcoord3 = mul(u_cascadeMtx2, vec4(wpos + (normal.xyz * normalOffset), 1.0));
         csmcoord3 = csmcoord3 / csmcoord3.w;
    vec4 csmcoord4 = mul(u_cascadeMtx3, vec4(wpos + (normal.xyz * normalOffset), 1.0));
         csmcoord4 = csmcoord4 / csmcoord4.w;
    
    float blendBandSize = 0.05;
    vec2 blendBandUpper = vec2_splat(1.0 + blendBandSize);
    vec2 blendBandLower = vec2_splat(-blendBandSize);
    vec2 selectionUpper = vec2_splat(1.0 - blendBandSize);
    vec2 selectionLower = vec2_splat(blendBandSize);

    bool blend0 = all(lessThan(csmcoord1.xy, blendBandUpper)) && all(greaterThan(csmcoord1.xy, blendBandLower));
    bool blend1 = all(lessThan(csmcoord2.xy, blendBandUpper)) && all(greaterThan(csmcoord2.xy, blendBandLower));
    bool blend2 = all(lessThan(csmcoord3.xy, blendBandUpper)) && all(greaterThan(csmcoord3.xy, blendBandLower));
    //bool blend3 = all(lessThan(csmcoord1.xy, blendBandUpper)) && all(greaterThan(csmcoord1.xy, blendBandLower));

    bool selection0 = all(lessThan(csmcoord1.xy, selectionUpper)) && all(greaterThan(csmcoord1.xy, selectionLower));
    bool selection1 = all(lessThan(csmcoord2.xy, selectionUpper)) && all(greaterThan(csmcoord2.xy, selectionLower));
    bool selection2 = all(lessThan(csmcoord3.xy, selectionUpper)) && all(greaterThan(csmcoord3.xy, selectionLower));
    //bool selection3 = all(lessThan(csmcoord4.xy, vec2_splat(0.99))) && all(greaterThan(csmcoord4.xy, vec2_splat(0.01)));

    float visibility = 1.0;
    vec3 colorCoverage;
    /*if (blend0 && !selection0)
    {
        colorCoverage = vec3(0.4, 0.4 * 0.4, 0.0);
    }
    else if (blend1 && !selection1)
    {
        colorCoverage = vec3(0.4, 0.4, 0.4);
    }
    else if (blend2 && !selection2)
    {
        colorCoverage = vec3(0.4, 0.0, 0.4);
    }*/
    if (selection0)
    {
        float coverage = texcoordInRange(csmcoord1.xy) * 0.4;
        colorCoverage = vec3(-coverage, coverage, -coverage);
    }
    else if (selection1)
    {
        float coverage = texcoordInRange(csmcoord2.xy) * 0.4;
        colorCoverage = vec3(coverage, coverage, -coverage);
    }
    else if (selection2)
    {
        float coverage = texcoordInRange(csmcoord3.xy) * 0.4;
        colorCoverage = vec3(-coverage, -coverage, coverage);
    }
    else // if (selection3)
    {
        float coverage = texcoordInRange(csmcoord4.xy) * 0.4;
        colorCoverage = vec3(coverage, -coverage, -coverage);
    }

    // Output
    gl_FragColor = vec4(colorCoverage, 1.0);
}
