$input v_color0, v_texcoord0, v_sspos

#include <torque6.tsh>
#include <lighting.tsh>

uniform vec4 u_sceneDirLightDirection;
uniform vec4 u_sceneDirLightColor;
uniform mat4 u_sceneInvViewProjMat;
uniform vec4 u_camPos;

SAMPLER2D(Texture0, 0); // Normals
SAMPLER2D(Texture1, 1); // Material Info
SAMPLER2D(Texture2, 2); // Depth

// Cascaded ShadowMap
#include <shadows.tsh>
SAMPLER2DSHADOW(ShadowMap, 3); // ShadowMap
uniform mat4 u_shadowMtx[4];
uniform vec4 u_shadowParams;

void main()
{
    // Material Info
    vec4 matInfo = texture2D(Texture1, v_texcoord0);

    // Surface Info
    Surface surface;
    surface.worldSpacePosition  = getWorldSpacePosition(Texture2, v_texcoord0, u_sceneInvViewProjMat);
    surface.normal              = decodeNormalUint(texture2D(Texture0, v_texcoord0).xyz);
    surface.metallic            = matInfo.r;
    surface.roughness           = matInfo.g;

    // View Direction
    vec3 viewDir = normalize(u_camPos.xyz - surface.worldSpacePosition);

    // Shadows
    float shadow = getShadow(surface, ShadowMap, u_shadowMtx, u_shadowParams);

    // Directional Light
    LightingResult light = getDirectionalLight(surface, viewDir, u_sceneDirLightDirection.xyz, u_sceneDirLightColor.rgb, shadow);

    // Output
    gl_FragData[0] = vec4(light.diffuse, 1.0);
    gl_FragData[1] = vec4(light.specular, 1.0);
}
