// Common Lighting Result
struct LightingResult
{
    vec3 diffuse;
    vec3 specular;
};

// Frostbite Attenuation
// Source: http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
float smoothDistanceAtt(float squaredDistance, float invSqrAttRadius)
{
    float factor        = squaredDistance * invSqrAttRadius;
    float smoothFactor  = clamp(1.0 - factor * factor, 0.0, 1.0);

    return smoothFactor * smoothFactor;
}

float getDistanceAtt(vec3 unormalizedLightVector, float invSqrAttRadius)
{
    float sqrDist       = dot(unormalizedLightVector, unormalizedLightVector);
    float attenuation   = 1.0 / (max(sqrDist, 0.01*0.01));
    attenuation         *= smoothDistanceAtt(sqrDist, invSqrAttRadius);

    return attenuation;
}

float getAngleAtt(vec3 normalizedLightVector, vec3 lightDir, float lightAngleScale, float lightAngleOffset)
{
    float cd            = dot(lightDir, normalizedLightVector);
    float attenuation   = clamp(cd * lightAngleScale + lightAngleOffset, 0.0, 1.0);
    attenuation         *= attenuation;

    return attenuation;
}

// GGX Specular
// Source: http://www.filmicworlds.com/images/ggx-opt/optimized-ggx.hlsl
float G1V(float dotNV, float k)
{
    return 1.0 / (dotNV * (1.0 - k) + k);
}

vec3 specularGGX(vec3 N, vec3 V, vec3 L, float roughness, float F0)
{
    float alpha = roughness * roughness;

    vec3 H = normalize(V + L);

    float dotNL = clamp(dot(N,L), 0.0, 1.0);
    float dotNV = clamp(dot(N,V), 0.0, 1.0);
    float dotNH = clamp(dot(N,H), 0.0, 1.0);
    float dotLH = clamp(dot(L,H), 0.0, 1.0);

    // D
    float alphaSqr = alpha * alpha;
    float pi = 3.14159;
    float denom = dotNH * dotNH * (alphaSqr - 1.0) + 1.0;
    float D = alphaSqr / (pi * denom * denom);

    // F
    float dotLH5 = pow(1.0 - dotLH, 5);
    float F = F0 + (1.0 - F0) * (dotLH5);

    // V
    float k = alpha / 2.0f;
    float vis = G1V(dotNL, k) * G1V(dotNV, k);

    vec3 specular = vec3_splat(dotNL * D * F * vis);
    return specular;
}

// Lighting Equations - Fresnel
vec3 fresnel(vec3 reflectivity, float dot, float strength)
{
	return reflectivity + (1.0 - reflectivity) * pow(1.0 - dot, 5.0) * strength;
}

vec3 calcFresnel(vec3 _cspec, float _dot)
{
	return _cspec + (1.0 - _cspec) * pow(1.0 - _dot, 5.0);
}

// Lighting Equations - Direct Lighting
vec3 directLighting(vec3 viewDir, vec3 normal, float roughness, vec3 lightDir, vec3 lightColor, float shadow)
{
	vec3 v = viewDir;
	vec3 n = normalize(normal);
	vec3 l = normalize(lightDir);

    // Lambert Diffuse
    float ndotl = clamp(dot(n, l), 0.0, 1.0);
    vec3 diffuse = lightColor * ndotl;

    // GGX Specular
    vec3 specular = specularGGX(n, v, l, roughness, 1.0);

    // Combine.
    return (diffuse + (specular * lightColor)) * vec3_splat(shadow); 
}

// Based on shaders by Dario Manesku
// Source: https://github.com/dariomanesku/cmftStudio/

// Lighting Equations - Image Based Lighting
vec3 iblLighting(Surface        surface,
                 vec3           viewDir, 
                 sampler2D      brdfTexture, 
                 samplerCube    radianceCube, 
                 samplerCube    irradianceCube)
{
    vec3  v     = viewDir;
    vec3  n     = normalize(surface.normal);
    float ndotv = clamp(dot(n, v), 0.0, 1.0);

    // Determine reflective color
    vec3 reflectivity   = vec3_splat(surface.metallic);
    reflectivity        = clamp(reflectivity, 0.0, 0.999);
    vec3 reflColor      = mix(vec3_splat(0.04), surface.albedo, reflectivity);

    // Fresnel
	vec3 envF0      = calcFresnel(reflColor, ndotv);
    vec3 envSpec    = envF0;
	vec3 envDiff    = surface.albedo * (1.0 - envF0);

    // BRDF
    vec2 brdf = texture2D(brdfTexture, vec2(surface.roughness, ndotv)).xy;

    // Radiance (Specular)
    float lod       = surface.roughness * 6.0;
    vec3 r          = 2.0 * ndotv * n - v; // reflect(v, n);
    vec3 cubeR      = normalize(r);
    cubeR.yz        = vec2(cubeR.z, cubeR.y * -1.0); // Adjust to Y-Up
    vec3 radiance   = envSpec * toLinear(textureCubeLod(radianceCube, cubeR, lod).xyz) * (brdf.x + brdf.y);

    // Irradiance (Diffuse)
    vec3 cubeN      = n;
    cubeN.yz        = vec2(cubeN.z, cubeN.y * -1.0); // Adjust to Y-Up
    vec3 irradiance = envDiff * toLinear(textureCube(irradianceCube, cubeN).xyz);
    
    return radiance + irradiance;
}

// Box Projected IBL Lighting
// Based on: http://www.gamedev.net/topic/568829-box-projected-cubemap-environment-mapping/

vec3 boxProject(vec3 wsPosition, vec3 reflectDir, vec3 boxWSPos, vec3 boxMin, vec3 boxMax)
{ 
    vec3 nrdir = normalize(reflectDir);
    vec3 rbmax = (boxMax - wsPosition) / nrdir;
    vec3 rbmin = (boxMin - wsPosition) / nrdir;

    vec3 rbminmax;
    rbminmax.x = (nrdir.x > 0.0) ? rbmax.x : rbmin.x;
    rbminmax.y = (nrdir.y > 0.0) ? rbmax.y : rbmin.y;
    rbminmax.z = (nrdir.z > 0.0) ? rbmax.z : rbmin.z; 

    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);
    vec3 posonbox = wsPosition + nrdir * fa;

    return posonbox - boxWSPos;
}

vec3 iblLightingBox(Surface        surface,
                    vec3           viewDir, 
                    sampler2D      brdfTexture, 
                    samplerCube    radianceCube, 
                    samplerCube    irradianceCube,
                    vec3           boxPos,
                    vec3           boxMin,
                    vec3           boxMax)
{
    vec3  v     = viewDir;
    vec3  n     = surface.normal;
    float ndotv = clamp(dot(n, v), 0.0, 1.0);

    // Determine reflective color
    vec3 reflectivity   = vec3_splat(surface.metallic);
    reflectivity        = clamp(reflectivity, 0.0, 0.999);
    vec3 reflColor      = mix(vec3_splat(0.04) * surface.albedo, surface.albedo, reflectivity);

    // Fresnel
	vec3 envF0      = calcFresnel(reflColor, ndotv);
    vec3 envSpec    = envF0;
	vec3 envDiff    = surface.albedo * (1.0 - envF0);

    // BRDF
    vec2 brdf = texture2D(brdfTexture, vec2(surface.roughness, ndotv)).xy;

    // Radiance (Specular)
    float lod       = surface.roughness * 6.0;
    vec3 r          = 2.0 * ndotv * n - v; // reflect(v, n);
    vec3 cubeR      = normalize(r);
    cubeR           = boxProject(surface.worldSpacePosition, cubeR, boxPos, boxMin, boxMax);
    cubeR.yz        = vec2(cubeR.z, cubeR.y * -1.0); // Adjust to Y-Up
    vec3 radiance   = envSpec * toLinear(textureCubeLod(radianceCube, cubeR, lod).xyz) * (brdf.x + brdf.y);

    // Irradiance (Diffuse)
    vec3 cubeN      = n;
    cubeN           = boxProject(surface.worldSpacePosition, cubeN, boxPos, boxMin, boxMax);
    cubeN.yz        = vec2(cubeN.z, cubeN.y * -1.0); // Adjust to Y-Up
    vec3 irradiance = envDiff * toLinear(textureCube(irradianceCube, cubeN).xyz);
    
    return radiance + irradiance;
}

// Lighting Equations - Point Light
vec3 getPointLight(Surface surface, vec3 viewDir, vec3 lightPos, vec3 lightColor, vec4 lightParams)
{
	vec3  lp            = lightPos - surface.worldSpacePosition;
    vec3  lightDir      = normalize(lp);
    float invSquareAttn = lightParams.x;
	float intensity     = lightParams.y;

    float attn = 1.0;
    attn *= getDistanceAtt(lp, invSquareAttn);
    attn *= getAngleAtt(lightDir, lightDir, 1.0, 0.0);

    vec3 lc = directLighting(viewDir, surface.normal, surface.roughness, lightDir, lightColor, attn);
	return lc * intensity;
}

// Lighting Equations - Directional Light
vec3 getDirectionalLight(Surface surface, vec3 viewDir, vec3 lightDir, vec3 lightColor, float shadow)
{
    vec3 lc = directLighting(viewDir, surface.normal, surface.roughness, lightDir, lightColor, shadow);
    return lc;
}
