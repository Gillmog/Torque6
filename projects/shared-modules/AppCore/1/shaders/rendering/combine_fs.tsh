$input v_texcoord0

#include <torque6.tsh>
#include <lighting.tsh>

SAMPLER2D(Texture0, 0); // Albedo
SAMPLER2D(Texture1, 1); // Material Info
SAMPLER2D(Texture2, 2); // Direct Light Buffer
SAMPLER2D(Texture3, 3); // Indirect Light Buffer

void main()
{
    Surface surface;

    // Albedo
    surface.albedo = decodeRGBE8(texture2D(Texture0, v_texcoord0));

    // Material Parameters
    vec4  matInfo       = texture2D(Texture1, v_texcoord0);
    surface.metallic    = matInfo.r;
    surface.roughness   = matInfo.g;
    surface.emissive    = matInfo.a;

    // Determine reflective color
    vec3 reflectivity   = vec3_splat(surface.metallic);
    reflectivity        = clamp(reflectivity, 0.0, 0.999);
    vec3 reflColor      = mix(vec3_splat(0.04), surface.albedo, reflectivity);

    // Fresnel
    //vec3 dirF0      = calcFresnel(reflColor, hdotv);
	//vec3 dirSpec    = dirF0;
	vec3 dirDiff    = surface.albedo * (1.0 - reflColor);

    // Direct Lighting
    vec3 lightColor     = texture2D(Texture2, v_texcoord0).rgb;
    vec3 directLight    = dirDiff * lightColor;

    // Indirect Lighting
    vec3 indirectLight = texture2D(Texture3, v_texcoord0).rgb;

    // Output with emissive support
    gl_FragColor = encodeRGBE8((directLight + indirectLight) * (1.0 - surface.emissive) + (surface.albedo * surface.emissive));
}
