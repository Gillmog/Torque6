$input v_texcoord0

#include <torque6.tsh>
#include <lighting.sh>

uniform mat4 u_sceneInvViewProjMat;
uniform vec4 u_camPos;
uniform vec4 u_time;

SAMPLER2D(Texture0, 0); // Backbuffer
SAMPLER2D(Texture1, 1); // Depth
SAMPLER2D(Texture2, 2); // HeightMap
SAMPLER2D(Texture3, 3); // NormalMap

mat3 computeTangentFrame(vec3 N, vec3 P, vec2 UV)
{
	vec3 dp1 = ddx(P);
	vec3 dp2 = ddy(P);
	vec2 duv1 = ddx(UV);
	vec2 duv2 = ddy(UV);
	
	mat3 M          = mat3(dp1, dp2, cross(dp1, dp2));
	mat2x3 inverseM = mat2x3( cross( M[1], M[2] ), cross( M[2], M[0] ) );
	vec3 T          = mul(vec2(duv1.x, duv2.x), inverseM);
	vec3 B          = mul(vec2(duv1.y, duv2.y), inverseM);
	
	return mat3(normalize(T), normalize(B), N);
}

float fresnelTerm(vec3 normal, vec3 eyeVec)
{
    float R0 = 0.5;
    float refractionStrength = 0.0;
    float angle = 1.0 - clamp(dot(normal, eyeVec), 0.0, 1.0);
    float fresnel = angle * angle;
    fresnel = fresnel * fresnel;
    fresnel = fresnel * angle;
    return clamp(fresnel * (1.0 - clamp(R0, 0.0, 1.0)) + R0 - refractionStrength, 0.0, 1.0);
}

void main()
{
    vec3  colorSample   = texture2D(Texture0, v_texcoord0).rgb;
    vec3  outputColor   = colorSample;
    float deviceDepth   = texture2D(Texture1, v_texcoord0).x;
    float depth         = toClipSpaceDepth(deviceDepth);
    vec3  clip          = vec3(toClipSpace(v_texcoord0), depth);
    vec3  position      = clipToWorld(u_sceneInvViewProjMat, clip);

    // Settings
    float waterLevel        = 1.5;
    vec3  depthColor        = vec3(0.0078, 0.5176, 0.7);
    vec3  bigDepthColor     = vec3(0.0039, 0.00196, 0.145);
    vec3  extinction        = vec3(7.0, 30.0, 40.0);	
    vec2  scale             = vec2(0.05, 0.05);
    float maxAmplitude      = 1.0;
    float normalScale       = 1.0;
    vec4  normalModifier    = vec4(1.0, 2.0, 4.0, 8.0);
    vec2  wind              = vec2(-0.3, 0.7);
    float refractionScale   = 0.005;
    float fadeSpeed         = 0.15;
    vec3  lightDir          = vec3(0.0, 1.0, 1.0);
    vec3  sunColor          = vec3(1.0, 0.8, 0.8);
    float shininess         = 0.7;
    vec3 foamExistence      = vec3(0.65, 1.35, 0.5);

    // Check if the point is underwater
    if ( position.z <= waterLevel + maxAmplitude )
    {
        // View Direction
        vec3 viewDir = normalize(u_camPos.xyz - position);

		// Find intersection with water surface
		float t = (waterLevel - u_camPos.z) / viewDir.z;
		vec3 surfacePoint = u_camPos.xyz + viewDir * t;

		vec2 texCoord;
		for(int i = 0; i < 10; ++i)
		{
			texCoord = (surfacePoint.xy + viewDir.xy * 0.1) * scale + u_time.x * 0.000005 * wind;
			float bias = texture2DLod(Texture2, texCoord, 0.0).r;

			bias *= 0.1;
			waterLevel += bias * maxAmplitude;
			t = (waterLevel - u_camPos.z) / viewDir.z;
			surfacePoint = u_camPos.xyz + viewDir * t;
		}

        // Calculate Water Depth
        float waveDepth = length(position - surfacePoint);
        float waterDepth = surfacePoint.z - position.z;
        vec3 depthFade = vec3_splat(waterDepth) / extinction;
        viewDir = normalize(u_camPos.xyz - surfacePoint);

        // Compute Surface Normal
		float normal1       = texture2D(Texture3, texCoord + vec2(-1.0 / 256.0, 0.0) ).r;
		float normal2       = texture2D(Texture3, texCoord + vec2(1.0 / 256.0, 0.0) ).r;
		float normal3       = texture2D(Texture3, texCoord + vec2(0.0, -1.0 / 256.0) ).r;
		float normal4       = texture2D(Texture3, texCoord + vec2(0.0, 1.0 / 256.0) ).r;
		vec3 surfaceNormal  = normalize(vec3((normal1 - normal2) * maxAmplitude, (normal3 - normal4) * maxAmplitude, normalScale));   

        float fresnel = fresnelTerm(surfaceNormal, viewDir);

        //float specular = 0.0;
		//vec3 mirrorEye = (2.0 * dot(viewDir, surfaceNormal) * surfaceNormal - viewDir);
		//float dotSpec = clamp(dot(mirrorEye.xyz, -lightDir) * 0.5 + 0.5, 0.0, 1.0);
		//specular = (1.0 - fresnel) * clamp(-lightDir.z, 0.0, 1.0) * ((pow(dotSpec, 512.0)) * (shininess * 1.8f + 0.2f)) * sunColor;
		//specular += specular * 25.0 * clamp(shininess - 0.05, 0.0, 1.0) * sunColor;	

        vec3 specular = specularGGX(surfaceNormal, viewDir, lightDir, 0.3, 1.0);	

        vec3 foam = vec3(0.0, 0.0, 0.0);
        if( waterDepth < foamExistence.x )
            foam = vec3(0.5, 0.5, 0.5);

        texCoord = v_texcoord0;
		texCoord.x += sin(u_time.x * 0.002 + 3.0 * abs(position.z)) * (refractionScale * min(waterDepth, 1.0));
		vec3 refraction = texture2D(Texture0, texCoord).rgb;

		outputColor = mix(outputColor, depthColor, clamp(waveDepth * fadeSpeed, 0.0, 1.0));
        outputColor = mix(outputColor, bigDepthColor, depthFade);
        outputColor += vec3_splat(fresnel * 0.3);
    }

	if( position.z > waterLevel )
		outputColor = colorSample;

	gl_FragColor = vec4(outputColor.rgb, 1.0);
}
