// Convert a UV [-1:1] + faceID (0 - 5) to a vector
vec3 texelCoordToVec(vec2 uv, int faceID)
{
    mat3 faceUvVectors[6];

    // +x
    faceUvVectors[0][0] = vec3(0.0, 0.0, -1.0); // u -> -z
    faceUvVectors[0][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[0][2] = vec3(1.0, 0.0, 0.0);  // +x face

    // -x
    faceUvVectors[1][0] = vec3(0.0, 0.0, 1.0);  // u -> +z
    faceUvVectors[1][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[1][2] = vec3(-1.0, 0.0, 0.0); // -x face

    // +y
    faceUvVectors[2][0] = vec3(1.0, 0.0, 0.0);  // u -> +x
    faceUvVectors[2][1] = vec3(0.0, 0.0, 1.0);  // v -> +z
    faceUvVectors[2][2] = vec3(0.0, 1.0, 0.0);  // +y face

    // -y
    faceUvVectors[3][0] = vec3(1.0, 0.0, 0.0);  // u -> +x
    faceUvVectors[3][1] = vec3(0.0, 0.0, -1.0); // v -> -z
    faceUvVectors[3][2] = vec3(0.0, -1.0, 0.0); // -y face

    // +z
    faceUvVectors[4][0] = vec3(1.0, 0.0, 0.0);  // u -> +x
    faceUvVectors[4][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[4][2] = vec3(0.0, 0.0, 1.0);  // +z face

    // -z
    faceUvVectors[5][0] = vec3(-1.0, 0.0, 0.0); // u -> -x
    faceUvVectors[5][1] = vec3(0.0, -1.0, 0.0); // v -> -y
    faceUvVectors[5][2] = vec3(0.0, 0.0, -1.0); // -z face

    // out = u * s_faceUv[0] + v * s_faceUv[1] + s_faceUv[2].
    vec3 result = (faceUvVectors[faceID][0] * uv.x) + (faceUvVectors[faceID][1] * uv.y) + faceUvVectors[faceID][2];
    return normalize(result);
}

// Based on:
// http://codeflow.org/entries/2011/apr/13/advanced-webgl-part-2-sky-rendering/
float phase(float alpha, float g)
{
    float g2 = g * g;
    float a = 3.0 * (1.0 - g2);
    float b = 2.0 * (2.0 + g2);
    float c = 1.0 + (alpha * alpha);
    float d = pow(1.0 + g2 - 2.0 * g * alpha, 1.5);
    return (a / b) * (c / d);
}

float atmospheric_depth(vec3 position, vec3 dir)
{
    float a = dot(dir, dir);
    float b = 2.0 * dot(dir, position);
    float c = dot(position, position)-1.0;
    float det = b * b - 4.0 * a * c;
    float detSqrt = sqrt(det);
    float q = (-b - detSqrt) / 2.0;
    float t1 = c / q;
    return t1;
}

float horizon_extinction(vec3 position, vec3 dir, float radius)
{
    float u = dot(dir, -position);
    if(u < 0.0){
        return 1.0;
    }
    vec3 near = position + u * dir;
    if(length(near) < radius){
        return 0.0;
    }
    else{
        vec3 v2 = normalize(near) * radius - position;
        float diff = acos(dot(normalize(v2), dir));
        return smoothstep(0.0, 1.0, pow(diff * 2.0, 3.0));
    }
}

vec3 absorb(float dist, vec3 color, float factor, vec3 Kr)
{
    return color - color * pow(Kr, vec3_splat(factor / dist));
}

