$input v_texcoord0

#include <torque6.tsh>
#include <scattersky.tsh>

uniform vec4 u_cubeParams;
uniform vec4 u_skyParams1;
uniform vec4 u_skyParams2;
uniform vec4 u_skyParams3;
uniform vec4 u_skyParams4;
uniform vec4 u_skyParams5;

#define intensity                   u_skyParams1.x
#define spot_brightness             u_skyParams1.y
#define surface_height              u_skyParams1.z
#define scatter_strength            u_skyParams1.w
#define mie_brightness              u_skyParams2.x
#define mie_distribution            u_skyParams2.y
#define mie_collection_power        u_skyParams2.z
#define mie_strength                u_skyParams2.w
#define rayleigh_brightness         u_skyParams3.x
#define rayleigh_collection_power   u_skyParams3.y
#define rayleigh_strength           u_skyParams3.z

void main()
{
    float step_count    = u_skyParams4.x;
    vec3 lightdir       = u_skyParams4.yzw;
    vec3 Kr             = u_skyParams5.rgb;

    vec2 uv     = (v_texcoord0.xy * 2.0) - 1.0;
    vec3 eyedir = texelCoordToVec(uv, int(u_cubeParams.x));
    float alpha = dot(eyedir, lightdir) / length(lightdir);

    float rayleigh_factor   = phase(alpha, -0.01) * rayleigh_brightness;
    float mie_factor        = phase(alpha, mie_distribution) * mie_brightness;
    float spot              = smoothstep(0.0, 15.0, phase(alpha, 0.9999)) * spot_brightness;

    vec3 eye_position       = vec3(0.0, surface_height, 0.0);
    float eye_depth         = atmospheric_depth(eye_position, eyedir);
    float step_length       = eye_depth / float(step_count);
    float eye_extinction    = horizon_extinction(eye_position, eyedir, surface_height - 0.15);

    vec3 rayleigh_collected = vec3(0.0, 0.0, 0.0);
    vec3 mie_collected      = vec3(0.0, 0.0, 0.0);
    float i                 = 0.0;
    for(; i < step_count; i += 1.0)
    {
        float sample_distance   = step_length * i;
        vec3 position           = eye_position + eyedir * sample_distance;
        float extinction        = horizon_extinction(position, lightdir, surface_height - 0.35);
        float sample_depth      = atmospheric_depth(position, lightdir);
        vec3 influx             = absorb(sample_depth, vec3_splat(intensity), scatter_strength, Kr) * extinction;

        rayleigh_collected  += absorb(sample_distance, Kr * influx, rayleigh_strength, Kr);
        mie_collected       += absorb(sample_distance, influx, mie_strength, Kr);
    }

    rayleigh_collected  = (rayleigh_collected * eye_extinction * pow(eye_depth, rayleigh_collection_power)) / step_count;
    mie_collected       = (mie_collected * eye_extinction * pow(eye_depth, mie_collection_power)) / step_count;

    vec3 sky_color      = vec3(spot * mie_collected + mie_factor * mie_collected + rayleigh_factor * rayleigh_collected);
    vec3 ground_color   = vec3(0.0196, 0.0117, 0.0078);

    gl_FragColor    = toGamma(vec4(mix(ground_color, sky_color, eye_extinction), 1.0));
}
